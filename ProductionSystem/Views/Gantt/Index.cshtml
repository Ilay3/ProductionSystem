@{
    ViewData["Title"] = "Диаграмма Ганта";
}
@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gantt-chart@0.2.2/dist/gantt-chart.min.css">
}

<div class="row">
    <div class="col-md-12">
        <h2>@ViewData["Title"]</h2>

        <!-- Фильтры -->
        <div class="card mb-3">
            <div class="card-header">
                <h5>Фильтры</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label for="orderFilter">Производственное задание</label>
                        <select id="orderFilter" class="form-control">
                            <option value="">Все задания</option>
                            @foreach (var order in ViewBag.Orders)
                            {
                                @if (ViewBag.SelectedOrderId == order.Id)
                                {
                                    <option value="@order.Id" selected>@order.Number - @order.Name</option>
                                }
                                else
                                {
                                    <option value="@order.Id">@order.Number - @order.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="machineFilter">Станок</label>
                        <select id="machineFilter" class="form-control">
                            <option value="">Все станки</option>
                            @foreach (var machine in ViewBag.Machines)
                            {
                                @if (ViewBag.SelectedMachineId == machine.Id)
                                {
                                    <option value="@machine.Id" selected>@machine.Name</option>
                                }
                                else
                                {
                                    <option value="@machine.Id">@machine.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="startDate">Дата начала</label>
                        <input type="date" id="startDate" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label for="endDate">Дата окончания</label>
                        <input type="date" id="endDate" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label for="hideCompleted">Скрыть завершенные</label>
                        <div class="form-check form-switch mt-2">
                            <input class="form-check-input" type="checkbox" id="hideCompleted" @(ViewBag.HideCompleted ? "checked" : "")>
                            <label class="form-check-label" for="hideCompleted">Скрыть</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label>&nbsp;</label>
                        <button type="button" class="btn btn-primary btn-block" onclick="updateGantt()">
                            Обновить
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Кнопки управления -->
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <button id="processAutomation" class="btn btn-success me-2" onclick="processAutomaticExecution()">
                            <i class="fas fa-play"></i> Запустить автоматику
                        </button>
                        <button class="btn btn-warning me-2" onclick="showQueueManagement()">
                            <i class="fas fa-list"></i> Управление очередями
                        </button>
                        <span id="automationStatus" class="badge bg-secondary ms-3">Статус автоматики</span>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-secondary" onclick="zoomGantt(-1)">
                                <i class="fas fa-search-minus"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="zoomGantt(1)">
                                <i class="fas fa-search-plus"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="scrollToNow()">
                                <i class="fas fa-clock"></i> Сейчас
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Легенда -->
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <strong>Легенда:</strong>
                        <span class="badge bg-info ms-2">Готов к запуску</span>
                        <span class="badge bg-warning ms-2">В очереди</span>
                        <span class="badge bg-primary ms-2">В работе</span>
                        <span class="badge bg-secondary ms-2">На паузе</span>
                        <span class="badge bg-success ms-2">Завершен</span>
                        <span class="badge" style="background-color: #FF9800; color: white;" ms-2>Переналадка</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Диаграмма -->
        <div class="card">
            <div class="card-body">
                <div id="gantt_chart" style="height: 700px; width: 100%;"></div>
            </div>
        </div>

        <!-- Загрузка станков -->
        <div class="card mt-3">
            <div class="card-header">
                <h5>Загрузка станков</h5>
            </div>
            <div class="card-body">
                <div id="utilization_chart" style="height: 400px; width: 100%;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal для управления очередями -->
<div class="modal fade" id="queueModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Управление очередями</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="queueContent">Загрузка...</div>
            </div>
        </div>
    </div>
</div>

<!-- Modal для действий с этапом -->
<div class="modal fade" id="stageActionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Действия с этапом</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="stageInfo"></div>
                <div id="stageActions" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

<script>
    // Глобальные переменные
    let ganttChart = null;
    let ganttDataGlobal = [];
    let selectedStageId = null;
    let chartContainer = null;
    let zoomLevel = 0;

    // Загрузка библиотеки Google Charts
    google.charts.load('current', {
        'packages': ['gantt', 'corechart', 'table'],
        'language': 'ru'
    });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        updateGantt();
        // Обновляем график каждые 30 секунд
        setInterval(updateGantt, 30000);
    }

    function updateGantt() {
        const orderId = document.getElementById('orderFilter').value;
        const machineId = document.getElementById('machineFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const hideCompleted = document.getElementById('hideCompleted').checked;

        // Показываем индикатор загрузки
        document.getElementById('gantt_chart').innerHTML =
            '<div class="text-center p-5"><i class="fa fa-spinner fa-spin fa-3x"></i><p class="mt-3">Загрузка данных...</p></div>';

        const params = new URLSearchParams();
        if (orderId) params.append('orderId', orderId);
        if (machineId) params.append('machineId', machineId);
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);
        params.append('hideCompleted', hideCompleted);

        fetch(`/Gantt/GetGanttData?${params.toString()}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Получено данных: ' + data.length);
                ganttDataGlobal = data;
                drawGanttChart(data);
                loadMachineUtilization();
            })
            .catch(error => {
                console.error('Error loading Gantt data:', error);
                document.getElementById('gantt_chart').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки данных: ${error.message}</div>`;
            });
    }

    function drawGanttChart(data) {
        if (!data || data.length === 0) {
            document.getElementById('gantt_chart').innerHTML =
                '<div class="alert alert-info">Нет данных для отображения. Попробуйте изменить фильтры.</div>';
            return;
        }

        const ganttData = new google.visualization.DataTable();

        // Структура для диаграммы Ганта
        ganttData.addColumn('string', 'Task ID');
        ganttData.addColumn('string', 'Task Name');
        ganttData.addColumn('string', 'Resource');
        ganttData.addColumn('date', 'Start Date');
        ganttData.addColumn('date', 'End Date');
        ganttData.addColumn('number', 'Duration');
        ganttData.addColumn('number', 'Percent Complete');
        ganttData.addColumn('string', 'Dependencies');

        // Добавляем строки с корректными датами
        data.forEach(item => {
            try {
                const startDate = parseDate(item.actualStart || item.start);
                const endDate = parseDate(item.actualEnd || item.end);

                // Проверка корректности дат
                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                    console.warn(`Пропущены некорректные даты для задачи ${item.taskId}:`, item);
                    return;
                }

                // Duration в миллисекундах для Google Charts
                const duration = endDate.getTime() - startDate.getTime();
                if (duration <= 0) {
                    console.warn(`Пропущено нулевое или отрицательное duration для задачи ${item.taskId}:`, item);
                    return;
                }

                // Всегда устанавливаем percentComplete = 100 для завершенных задач
                let percentComplete = item.percentComplete || 0;
                if (item.status === 'Completed') {
                    percentComplete = 100;
                }

                ganttData.addRow([
                    item.taskId,
                    item.taskName,
                    item.resource || 'Не назначен',
                    startDate,
                    endDate,
                    duration,
                    percentComplete,
                    item.dependencies || null
                ]);
            } catch (err) {
                console.error(`Ошибка при добавлении задачи ${item.taskId}:`, err);
            }
        });

        if (ganttData.getNumberOfRows() === 0) {
            document.getElementById('gantt_chart').innerHTML =
                '<div class="alert alert-warning">Нет корректных данных для отображения после фильтрации.</div>';
            return;
        }

        // Вычисляем оптимальные даты для отображения
        const today = new Date();
        let minDate = new Date(today);
        minDate.setDate(today.getDate() - 7);
        let maxDate = new Date(today);
        maxDate.setDate(today.getDate() + 14);

        // Корректируем масштаб на основе zoomLevel
        const zoomFactor = Math.pow(1.5, zoomLevel);
        const zoomRangeDays = 21 / zoomFactor; // 21 день / фактор масштабирования

        minDate = new Date(today);
        minDate.setDate(today.getDate() - Math.floor(zoomRangeDays/2));
        maxDate = new Date(today);
        maxDate.setDate(today.getDate() + Math.ceil(zoomRangeDays/2));

        // Опции диаграммы с улучшенным отображением
        const options = {
            height: 700,
            width: '100%',
            gantt: {
                trackHeight: 35,
                barHeight: 25,
                criticalPathEnabled: false,
                defaultStartDate: minDate,
                innerGridHorizontalStroke: '#eeeeee',
                innerGridVerticalStroke: '#eeeeee',
                labelStyle: {
                    fontName: 'Arial',
                    fontSize: 12,
                    color: '#333'
                }
            },
            hAxis: {
                format: 'dd.MM HH:mm',
                minValue: minDate,
                maxValue: maxDate
            }
        };

        chartContainer = document.getElementById('gantt_chart');
        ganttChart = new google.visualization.Gantt(chartContainer);

        // Обработчик кликов
        google.visualization.events.addListener(ganttChart, 'select', function () {
            const selection = ganttChart.getSelection();
            if (selection.length > 0) {
                const row = selection[0].row;
                if (ganttDataGlobal && ganttDataGlobal[row]) {
                    showStageActions(ganttDataGlobal[row]);
                }
            }
        });

        ganttChart.draw(ganttData, options);

        // Скролл к текущей дате
        scrollToNow();
    }

    // Функция для масштабирования
    function zoomGantt(direction) {
        zoomLevel += direction;
        if (zoomLevel < -2) zoomLevel = -2;
        if (zoomLevel > 3) zoomLevel = 3;

        // Перерисовываем с новым масштабом
        if (ganttDataGlobal.length > 0) {
            drawGanttChart(ganttDataGlobal);
        }
    }

    // Функция для скролла к текущей дате
    function scrollToNow() {
        if (chartContainer && ganttChart) {
            // Скроллим к текущей дате через небольшую задержку
            setTimeout(() => {
                // Находим элемент с текущей датой и скроллим к нему
                const today = new Date();
                const todayStr = today.toISOString().split('T')[0];
                const dateElements = chartContainer.querySelectorAll('text');

                // Ищем ближайший элемент с текущей датой
                for (let el of dateElements) {
                    if (el.textContent.includes(todayStr.substring(5))) { // MM-DD формат
                        // Скроллим так, чтобы текущая дата была посередине
                        const rect = el.getBoundingClientRect();
                        const containerRect = chartContainer.getBoundingClientRect();
                        chartContainer.scrollLeft = rect.left - containerRect.left - containerRect.width/2;
                        break;
                    }
                }
            }, 500);
        }
    }

    function parseDate(dateString) {
        if (!dateString) return new Date();

        try {
            // Парсим дату в правильном формате
            const date = new Date(dateString);
            return isNaN(date.getTime()) ? new Date() : date;
        } catch (e) {
            console.error('Ошибка парсинга даты:', dateString, e);
            return new Date();
        }
    }

    function loadMachineUtilization() {
        const machineId = document.getElementById('machineFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        const params = new URLSearchParams();
        if (machineId) params.append('machineId', machineId);
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);

        fetch(`/Gantt/GetMachineUtilization?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.length === 0) {
                    document.getElementById('utilization_chart').innerHTML =
                        '<div class="alert alert-info">Нет данных о загрузке станков за выбранный период.</div>';
                    return;
                }

                const dataTable = new google.visualization.DataTable();
                dataTable.addColumn('string', 'Станок');
                dataTable.addColumn('number', 'Производство (ч)');
                dataTable.addColumn('number', 'Переналадка (ч)');

                data.forEach(item => {
                    dataTable.addRow([
                        item.machine,
                        parseFloat(item.productionTime.toFixed(2)),
                        parseFloat(item.changeoverTime.toFixed(2))
                    ]);
                });

                const options = {
                    title: 'Загрузка станков (часы)',
                    titleTextStyle: { fontSize: 16 },
                    chartArea: { width: '80%', height: '80%' },
                    hAxis: { title: 'Время (часы)', minValue: 0 },
                    vAxis: { title: 'Станки' },
                    isStacked: true,
                    series: {
                        0: { color: '#28a745' },
                        1: { color: '#ffc107' }
                    },
                    backgroundColor: 'white',
                    legend: { position: 'top' }
                };

                const chart = new google.visualization.BarChart(document.getElementById('utilization_chart'));
                chart.draw(dataTable, options);
            })
            .catch(error => {
                console.error('Error loading utilization data:', error);
                document.getElementById('utilization_chart').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки данных о загрузке: ${error.message}</div>`;
            });
    }

    // Автоматическое управление
    function processAutomaticExecution() {
        const button = document.getElementById('processAutomation');
        const status = document.getElementById('automationStatus');

        button.disabled = true;
        button.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Обработка...';
        status.textContent = 'Выполняется...';
        status.className = 'badge bg-primary ms-3';

        fetch('/api/Automation/process', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                status.textContent = 'Успешно выполнено';
                status.className = 'badge bg-success ms-3';
                updateGantt(); // Обновляем диаграмму
                showToast('Автоматическая обработка выполнена успешно', 'success');
            } else {
                status.textContent = 'Ошибка выполнения';
                status.className = 'badge bg-danger ms-3';
                showToast('Ошибка: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error processing automation:', error);
            status.textContent = 'Ошибка связи';
            status.className = 'badge bg-danger ms-3';
            showToast('Ошибка связи с сервером', 'error');
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-play"></i> Запустить автоматику';

            // Через 5 секунд сбрасываем статус
            setTimeout(() => {
                status.textContent = 'Готово к запуску';
                status.className = 'badge bg-secondary ms-3';
            }, 5000);
        });
    }

    // Управление очередями
    function showQueueManagement() {
        const machineId = document.getElementById('machineFilter').value;

        if (!machineId) {
            showToast('Пожалуйста, выберите станок в фильтре', 'warning');
            return;
        }

        document.getElementById('queueContent').innerHTML =
            '<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Загрузка данных очереди...</div>';

        $('#queueModal').modal('show');

        fetch(`/Gantt/GetMachineQueue?id=${machineId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    showToast('Ошибка: ' + data.message, 'error');
                    $('#queueModal').modal('hide');
                    return;
                }

                let html = `<h6>Очередь для станка: ${data.machine}</h6>`;
                if (data.queue && data.queue.length > 0) {
                    html += '<table class="table table-sm">';
                    html += '<thead><tr><th>Операция</th><th>Деталь</th><th>Заказ</th><th>Тип</th><th>Прогноз</th><th>Действия</th></tr></thead>';
                    html += '<tbody>';
                    data.queue.forEach(item => {
                        const isChangeover = item.stageType === 'Changeover';
                        html += `<tr>
                            <td>${item.name}</td>
                            <td>${item.detailName}</td>
                            <td>${item.orderNumber}</td>
                            <td>${isChangeover ? '<span class="badge" style="background-color: #FF9800; color: white;">Переналадка</span>' : 'Операция'}</td>
                            <td>${item.estimatedStart ? new Date(item.estimatedStart).toLocaleString() : '-'}</td>
                            <td>
                                <button class="btn btn-sm btn-danger" onclick="removeFromQueue(${item.id})">
                                    Убрать из очереди
                                </button>
                            </td>
                        </tr>`;
                    });
                    html += '</tbody></table>';
                } else {
                    html += '<div class="alert alert-info">Очередь пуста</div>';
                }

                document.getElementById('queueContent').innerHTML = html;
            })
            .catch(error => {
                console.error('Error loading queue:', error);
                document.getElementById('queueContent').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки очереди: ${error.message}</div>`;
            });
    }

    // Действия с этапом
    function showStageActions(stageData) {
        selectedStageId = stageData.stageId;

        document.getElementById('stageInfo').innerHTML =
            '<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Загрузка информации...</div>';

        $('#stageActionModal').modal('show');

        fetch(`/Gantt/GetStageInfo?id=${stageData.stageId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Остальной код без изменений
                let infoHtml = `
                    <div class="row">
                        <div class="col-12">
                            <h6>${data.name}</h6>
                            <p class="mb-1"><strong>Деталь:</strong> ${data.detailName}</p>
                            <p class="mb-1"><strong>Заказ:</strong> ${data.orderNumber}</p>
                            <p class="mb-1"><strong>Станок:</strong> ${data.machineName || 'Не назначен'}</p>
                            <p class="mb-1"><strong>Тип:</strong>
                                ${data.stageType === 'Changeover' ?
                                    '<span class="badge" style="background-color: #FF9800; color: white;">Переналадка</span>' :
                                    'Операция'}
                            </p>
                            <p class="mb-1"><strong>Статус:</strong>
                                <span class="badge ${getStatusBadgeClass(data.status)}">${data.status}</span>
                            </p>
                            <p class="mb-1"><strong>Плановое время:</strong> ${data.plannedTime.toFixed(2)} ч</p>
                            ${data.estimatedStart ? `<p class="mb-1"><strong>Прогноз начала:</strong> ${new Date(data.estimatedStart).toLocaleString()}</p>` : ''}
                        </div>
                    </div>
                `;

                let actionsHtml = '';

                if (data.canReleaseMachine) {
                    actionsHtml += `
                        <button class="btn btn-warning me-2" onclick="releaseMachine(${data.machineId}, ${selectedStageId})">
                            <i class="fas fa-pause"></i> Освободить станок
                        </button>
                    `;
                }

                if (data.canAddToQueue) {
                    actionsHtml += `
                        <button class="btn btn-info me-2" onclick="addToQueue(${selectedStageId})">
                            <i class="fas fa-plus"></i> Добавить в очередь
                        </button>
                    `;
                }

                if (data.canRemoveFromQueue) {
                    actionsHtml += `
                        <button class="btn btn-secondary me-2" onclick="removeFromQueue(${selectedStageId})">
                            <i class="fas fa-minus"></i> Убрать из очереди
                        </button>
                    `;
                }

                actionsHtml += `
                    <a href="/RouteStages/Details/${selectedStageId}" class="btn btn-primary" target="_blank">
                        <i class="fas fa-external-link-alt"></i> Открыть детали
                    </a>
                `;

                document.getElementById('stageInfo').innerHTML = infoHtml;
                document.getElementById('stageActions').innerHTML = actionsHtml;
            })
            .catch(error => {
                console.error('Error loading stage info:', error);
                document.getElementById('stageInfo').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки информации об этапе: ${error.message}</div>`;
            });
    }

    // Функции управления этапами
    function addToQueue(stageId) {
        console.log('Добавление в очередь этапа:', stageId);

        document.getElementById('stageActions').innerHTML =
            '<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Добавление в очередь...</div>';

        fetch(`/Gantt/AddStageToQueue?id=${stageId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Этап добавлен в очередь', 'success');
                    updateGantt();
                    $('#stageActionModal').modal('hide');
                } else {
                    showToast('Ошибка: ' + data.message, 'error');
                    // Восстанавливаем кнопки действий
                    showStageActions({stageId: stageId});
                }
            })
            .catch(error => {
                console.error('Error adding to queue:', error);
                showToast('Ошибка добавления в очередь', 'error');
                // Восстанавливаем кнопки действий
                showStageActions({stageId: stageId});
            });
    }

    function removeFromQueue(stageId) {
        console.log('Удаление из очереди этапа:', stageId);

        // Находим и блокируем кнопку удаления из очереди
        const modalElement = document.getElementById('stageActionModal').classList.contains('show') ?
            'stageActions' : 'queueContent';

        const element = document.getElementById(modalElement);
        if (element) {
            const button = element.querySelector(`button[onclick*="${stageId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Удаление...';
            }
        }

        fetch(`/Gantt/RemoveStageFromQueue?id=${stageId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Этап убран из очереди', 'success');
                    updateGantt();

                    // Обновляем модальные окна
                    if (document.getElementById('queueModal').classList.contains('show')) {
                        showQueueManagement(); // Обновляем модальное окно очереди
                    }

                    if (document.getElementById('stageActionModal').classList.contains('show')) {
                        $('#stageActionModal').modal('hide');
                    }
                } else {
                    showToast('Ошибка: ' + data.message, 'error');
                    // Восстанавливаем кнопки
                    if (document.getElementById('queueModal').classList.contains('show')) {
                        showQueueManagement();
                    } else if (document.getElementById('stageActionModal').classList.contains('show')) {
                        showStageActions({stageId: stageId});
                    }
                }
            })
            .catch(error => {
                console.error('Error removing from queue:', error);
                showToast('Ошибка удаления из очереди', 'error');

                // Восстанавливаем кнопки
                if (document.getElementById('queueModal').classList.contains('show')) {
                    showQueueManagement();
                } else if (document.getElementById('stageActionModal').classList.contains('show')) {
                    showStageActions({stageId: stageId});
                }
            });
    }

    function releaseMachine(machineId, urgentStageId) {
        const reason = prompt('Укажите причину освобождения станка:');
        if (!reason) return;

        console.log('Освобождение станка:', machineId, 'для этапа:', urgentStageId);

        document.getElementById('stageActions').innerHTML =
            '<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Освобождение станка...</div>';

        fetch(`/Gantt/ReleaseMachine`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                machineId: machineId,
                urgentStageId: urgentStageId,
                reason: reason
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('Станок освобожден', 'success');
                updateGantt();
                $('#stageActionModal').modal('hide');
            } else {
                showToast('Ошибка: ' + data.message, 'error');
                // Восстанавливаем кнопки действий
                showStageActions({stageId: urgentStageId});
            }
        })
        .catch(error => {
            console.error('Error releasing machine:', error);
            showToast('Ошибка освобождения станка', 'error');
            // Восстанавливаем кнопки действий
            showStageActions({stageId: urgentStageId});
        });
    }

    // Вспомогательные функции
    function getStatusBadgeClass(status) {
        const statusClasses = {
            'Pending': 'bg-secondary',
            'Ready': 'bg-info',
            'Waiting': 'bg-warning',
            'InProgress': 'bg-primary',
            'Paused': 'bg-secondary',
            'Completed': 'bg-success',
            'Cancelled': 'bg-danger'
        };
        return statusClasses[status] || 'bg-secondary';
    }

    function showToast(message, type = 'info') {
        // Удаляем существующие уведомления
        const existingToasts = document.querySelectorAll('.toast-notification');
        existingToasts.forEach(toast => toast.remove());

        // Определяем стиль уведомления
        const alertClass = type === 'success' ? 'alert-success' :
                          type === 'error' ? 'alert-danger' :
                          type === 'warning' ? 'alert-warning' : 'alert-info';

        const toast = $(`
            <div class="alert ${alertClass} alert-dismissible fade show position-fixed toast-notification"
                 style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `);

        $('body').append(toast);
        setTimeout(() => toast.alert('close'), 5000);
    }

    // Инициализация при загрузке страницы
    document.addEventListener('DOMContentLoaded', function() {
        const today = new Date();
        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const twoWeeksLater = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);

        document.getElementById('startDate').value = oneWeekAgo.toISOString().split('T')[0];
        document.getElementById('endDate').value = twoWeeksLater.toISOString().split('T')[0];

        // Устанавливаем начальный статус
        document.getElementById('automationStatus').textContent = 'Готово к запуску';

        // Подготавливаем CSS для скролла диаграммы
        const styleEl = document.createElement('style');
        styleEl.textContent = `
            #gantt_chart {
                overflow-x: auto;
                overflow-y: auto;
                position: relative;
            }
            .toast-notification {
                animation: fadeInOut 0.3s ease-in-out;
            }
    @@keyframes fadeInOut {
                0% { opacity: 0; transform: translateY(-20px); }
                100% { opacity: 1; transform: translateY(0); }
            }
        `;
        document.head.appendChild(styleEl);
    });
</script>