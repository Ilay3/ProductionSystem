@{
    ViewData["Title"] = "Диаграмма Ганта";
}
@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gantt-chart@0.2.2/dist/gantt-chart.min.css">
}

<div class="row">
    <div class="col-md-12">
        <h2>@ViewData["Title"]</h2>

        <!-- Фильтры -->
        <div class="card mb-3">
            <div class="card-header">
                <h5>Фильтры</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label for="orderFilter">Производственное задание</label>
                        <select id="orderFilter" class="form-control">
                            <option value="">Все задания</option>
                            @foreach (var order in ViewBag.Orders)
                            {
                                @if (ViewBag.SelectedOrderId == order.Id)
                                {
                                    <option value="@order.Id" selected>@order.Number - @order.Name</option>
                                }
                                else
                                {
                                    <option value="@order.Id">@order.Number - @order.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="machineFilter">Станок</label>
                        <select id="machineFilter" class="form-control">
                            <option value="">Все станки</option>
                            @foreach (var machine in ViewBag.Machines)
                            {
                                @if (ViewBag.SelectedMachineId == machine.Id)
                                {
                                    <option value="@machine.Id" selected>@machine.Name</option>
                                }
                                else
                                {
                                    <option value="@machine.Id">@machine.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="startDate">Дата начала</label>
                        <input type="date" id="startDate" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label for="endDate">Дата окончания</label>
                        <input type="date" id="endDate" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label>&nbsp;</label>
                        <button type="button" class="btn btn-primary btn-block" onclick="updateGantt()">
                            Обновить
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Кнопки управления -->
        <div class="card mb-3">
            <div class="card-body">
                <button id="processAutomation" class="btn btn-success me-2" onclick="processAutomaticExecution()">
                    <i class="fas fa-play"></i> Запустить автоматику
                </button>
                <button class="btn btn-warning" onclick="showQueueManagement()">
                    <i class="fas fa-list"></i> Управление очередями
                </button>
                <span id="automationStatus" class="badge bg-secondary ms-3">Автоматика остановлена</span>
            </div>
        </div>

        <!-- Легенда -->
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <strong>Легенда:</strong>
                        <span class="badge bg-secondary ms-2">Готов к запуску</span>
                        <span class="badge bg-info ms-2">В очереди</span>
                        <span class="badge bg-primary ms-2">В работе</span>
                        <span class="badge bg-warning ms-2">На паузе</span>
                        <span class="badge bg-success ms-2">Завершен</span>
                        <span class="badge bg-dark ms-2">Переналадка</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Диаграмма -->
        <div class="card">
            <div class="card-body">
                <div id="gantt_chart" style="height: 700px; width: 100%;"></div>
            </div>
        </div>

        <!-- Загрузка станков -->
        <div class="card mt-3">
            <div class="card-header">
                <h5>Загрузка станков</h5>
            </div>
            <div class="card-body">
                <div id="utilization_chart" style="height: 400px; width: 100%;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal для управления очередями -->
<div class="modal fade" id="queueModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Управление очередями</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="queueContent">Загрузка...</div>
            </div>
        </div>
    </div>
</div>

<!-- Modal для действий с этапом -->
<div class="modal fade" id="stageActionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Действия с этапом</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="stageInfo"></div>
                <div id="stageActions" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

<script>
    // Глобальные переменные
    let ganttChart = null;
    let ganttDataGlobal = [];
    let ganttData = null;
    let selectedStageId = null;

    // Загрузка библиотеки Google Charts
    google.charts.load('current', {
        'packages': ['gantt', 'corechart', 'table'],
        'language': 'ru'
    });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        updateGantt();
        setInterval(updateGantt, 30000); // Обновляем каждые 30 секунд
    }

    function updateGantt() {
        const orderId = document.getElementById('orderFilter').value;
        const machineId = document.getElementById('machineFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Показываем индикатор загрузки
        document.getElementById('gantt_chart').innerHTML =
            '<div class="text-center p-5"><i class="fa fa-spinner fa-spin fa-3x"></i><p class="mt-3">Загрузка данных...</p></div>';

        const params = new URLSearchParams();
        if (orderId) params.append('orderId', orderId);
        if (machineId) params.append('machineId', machineId);
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);

        fetch(`/Gantt/GetGanttData?${params.toString()}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Полученные данные:', data);
                ganttDataGlobal = data;
                drawGanttChart(data);
                loadMachineUtilization();
            })
            .catch(error => {
                console.error('Error loading Gantt data:', error);
                document.getElementById('gantt_chart').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки данных: ${error.message}</div>`;
            });
    }

        function drawGanttChart(data) {
        const ganttData = new google.visualization.DataTable();

        // Структура для диаграммы Ганта
        ganttData.addColumn('string', 'Task ID');
        ganttData.addColumn('string', 'Task Name');
        ganttData.addColumn('string', 'Resource');
        ganttData.addColumn('date', 'Start Date');
        ganttData.addColumn('date', 'End Date');
        ganttData.addColumn('number', 'Duration');
        ganttData.addColumn('number', 'Percent Complete');
        ganttData.addColumn('string', 'Dependencies');

        // Добавляем строки с корректными статусами
        data.forEach(item => {
            const startDate = parseDate(item.actualStart || item.start);
            const endDate = parseDate(item.actualEnd || item.end);

            // Duration в миллисекундах для Google Charts
            const duration = endDate.getTime() - startDate.getTime();

            // Всегда устанавливаем percentComplete = 100 для завершенных задач
            let percentComplete = item.percentComplete || 0;
            if (item.status === 'Completed') {
                percentComplete = 100;
            }

            ganttData.addRow([
                item.taskId,
                item.taskName,
                item.resource || 'Не назначен',
                startDate,
                endDate,
                duration,
                percentComplete,
                item.dependencies || null
            ]);
        });

        // Опции диаграммы с улучшенным отображением статусов
        const options = {
            height: 700,
            width: '100%',
            gantt: {
                trackHeight: 35,
                barHeight: 25,
                criticalPathEnabled: false,
                innerGridHorizontalStroke: '#eeeeee',
                innerGridVerticalStroke: '#eeeeee',
                labelStyle: {
                    fontName: 'Arial',
                    fontSize: 12,
                    color: '#333'
                },
                // Цветовая палитра по статусам
                palette: [
                    {
                        "color": "#17a2b8", // Ready - голубой
                        "dark": "#138496",
                        "light": "#5bc0de"
                    },
                    {
                        "color": "#0d6efd", // InProgress - синий
                        "dark": "#0a58ca",
                        "light": "#6ea8fe"
                    },
                    {
                        "color": "#ffc107", // Paused/Waiting - желтый
                        "dark": "#ffb000",
                        "light": "#ffda6a"
                    },
                    {
                        "color": "#198754", // Completed - зеленый
                        "dark": "#146c43",
                        "light": "#75b798"
                    },
                    {
                        "color": "#6c757d", // Changeover - серый
                        "dark": "#5a5a5a",
                        "light": "#8e8e8e"
                    }
                ]
            }
        };

        ganttChart = new google.visualization.Gantt(document.getElementById('gantt_chart'));

        // Обработчик кликов
        google.visualization.events.addListener(ganttChart, 'select', function () {
            const selection = ganttChart.getSelection();
            if (selection.length > 0) {
                const row = selection[0].row;
                if (ganttDataGlobal && ganttDataGlobal[row]) {
                    showStageActions(ganttDataGlobal[row]);
                }
            }
        });

        ganttChart.draw(ganttData, options);
    }

    function parseDate(dateString) {
        if (!dateString) return new Date();

        // Парсим дату в правильном формате
        const date = new Date(dateString);
        return isNaN(date.getTime()) ? new Date() : date;
    }

    function loadMachineUtilization() {
        const machineId = document.getElementById('machineFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        const params = new URLSearchParams();
        if (machineId) params.append('machineId', machineId);
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);

        fetch(`/Gantt/GetMachineUtilization?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                const dataTable = new google.visualization.DataTable();
                dataTable.addColumn('string', 'Станок');
                dataTable.addColumn('number', 'Производство (ч)');
                dataTable.addColumn('number', 'Переналадка (ч)');

                data.forEach(item => {
                    dataTable.addRow([
                        item.machine,
                        parseFloat(item.productionTime.toFixed(2)),
                        parseFloat(item.changeoverTime.toFixed(2))
                    ]);
                });

                const options = {
                    title: 'Загрузка станков (часы)',
                    titleTextStyle: { fontSize: 16 },
                    chartArea: { width: '80%', height: '80%' },
                    hAxis: { title: 'Время (часы)', minValue: 0 },
                    vAxis: { title: 'Станки' },
                    isStacked: true,
                    series: {
                        0: { color: '#28a745' },
                        1: { color: '#ffc107' }
                    },
                    backgroundColor: 'white'
                };

                const chart = new google.visualization.BarChart(document.getElementById('utilization_chart'));
                chart.draw(dataTable, options);
            })
            .catch(error => {
                console.error('Error loading utilization data:', error);
                document.getElementById('utilization_chart').innerHTML =
                    `<div class="alert alert-danger">Ошибка загрузки данных о загрузке: ${error.message}</div>`;
            });
    }

    // Автоматическое управление
    function processAutomaticExecution() {
        const button = document.getElementById('processAutomation');
        const status = document.getElementById('automationStatus');

        button.disabled = true;
        button.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Обработка...';

        fetch('/api/Automation/process', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                status.textContent = 'Автоматика выполнена';
                status.className = 'badge bg-success ms-3';
                updateGantt(); // Обновляем диаграмму
                showToast('Автоматическая обработка выполнена успешно', 'success');
            } else {
                status.textContent = 'Ошибка автоматики';
                status.className = 'badge bg-danger ms-3';
                showToast('Ошибка: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error processing automation:', error);
            status.textContent = 'Ошибка связи';
            status.className = 'badge bg-danger ms-3';
            showToast('Ошибка связи с сервером', 'error');
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-play"></i> Запустить автоматику';
        });
    }

    // Управление очередями
    function showQueueManagement() {
        const machineId = document.getElementById('machineFilter').value;

        if (!machineId) {
            showToast('Пожалуйста, выберите станок в фильтре', 'warning');
            return;
        }

        console.log('Запрос очереди для станка:', machineId);

        // Используем правильный URL для MVC
        fetch(`/Gantt/GetMachineQueue?id=${machineId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Получены данные очереди:', data);

                if (!data.success) {
                    showToast('Ошибка: ' + data.message, 'error');
                    return;
                }

                let html = `<h6>Очередь для станка: ${data.machine}</h6>`;
                if (data.queue && data.queue.length > 0) {
                    html += '<table class="table table-sm">';
                    html += '<thead><tr><th>Операция</th><th>Деталь</th><th>Прогноз</th><th>Действия</th></tr></thead>';
                    html += '<tbody>';
                    data.queue.forEach(item => {
                        html += `<tr>
                            <td>${item.name}</td>
                            <td>${item.detailName}</td>
                            <td>${item.estimatedStart ? new Date(item.estimatedStart).toLocaleString() : '-'}</td>
                            <td>
                                <button class="btn btn-sm btn-danger" onclick="removeFromQueue(${item.id})">
                                    Убрать из очереди
                                </button>
                            </td>
                        </tr>`;
                    });
                    html += '</tbody></table>';
                } else {
                    html += '<p class="text-muted">Очередь пуста</p>';
                }

                document.getElementById('queueContent').innerHTML = html;
                $('#queueModal').modal('show');
            })
            .catch(error => {
                console.error('Error loading queue:', error);
                showToast('Ошибка загрузки очереди: ' + error.message, 'error');
            });
    }

    // Действия с этапом
    function showStageActions(stageData) {
        selectedStageId = stageData.stageId;

        console.log('Запрос информации об этапе:', stageData.stageId);

        // Используем правильный URL для MVC
        fetch(`/Gantt/GetStageInfo?id=${stageData.stageId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Получены данные этапа:', data);
                // Остальной код без изменений
                let infoHtml = `
                    <div class="row">
                        <div class="col-12">
                            <h6>${data.name}</h6>
                            <p class="mb-1"><strong>Деталь:</strong> ${data.detailName}</p>
                            <p class="mb-1"><strong>Станок:</strong> ${data.machineName || 'Не назначен'}</p>
                            <p class="mb-1"><strong>Статус:</strong>
                                <span class="badge ${getStatusBadgeClass(data.status)}">${data.status}</span>
                            </p>
                            <p class="mb-1"><strong>Плановое время:</strong> ${data.plannedTime.toFixed(2)} ч</p>
                            ${data.estimatedStart ? `<p class="mb-1"><strong>Прогноз начала:</strong> ${new Date(data.estimatedStart).toLocaleString()}</p>` : ''}
                        </div>
                    </div>
                `;

                let actionsHtml = '';

                if (data.canReleaseMachine) {
                    actionsHtml += `
                        <button class="btn btn-warning me-2" onclick="releaseMachine(${data.machineId}, ${selectedStageId})">
                            <i class="fas fa-pause"></i> Освободить станок
                        </button>
                    `;
                }

                if (data.canAddToQueue) {
                    actionsHtml += `
                        <button class="btn btn-info me-2" onclick="addToQueue(${selectedStageId})">
                            <i class="fas fa-plus"></i> Добавить в очередь
                        </button>
                    `;
                }

                if (data.canRemoveFromQueue) {
                    actionsHtml += `
                        <button class="btn btn-secondary me-2" onclick="removeFromQueue(${selectedStageId})">
                            <i class="fas fa-minus"></i> Убрать из очереди
                        </button>
                    `;
                }

                actionsHtml += `
                    <a href="/RouteStages/Details/${selectedStageId}" class="btn btn-primary" target="_blank">
                        <i class="fas fa-external-link-alt"></i> Открыть детали
                    </a>
                `;

                document.getElementById('stageInfo').innerHTML = infoHtml;
                document.getElementById('stageActions').innerHTML = actionsHtml;
                $('#stageActionModal').modal('show');
            })
            .catch(error => {
                console.error('Error loading stage info:', error);
                showToast('Ошибка загрузки информации об этапе: ' + error.message, 'error');
            });
    }

    // Функции управления этапами
    function addToQueue(stageId) {
        console.log('Добавление в очередь этапа:', stageId);

        fetch(`/Gantt/AddStageToQueue?id=${stageId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Этап добавлен в очередь', 'success');
                    updateGantt();
                    $('#stageActionModal').modal('hide');
                } else {
                    showToast('Ошибка: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error adding to queue:', error);
                showToast('Ошибка добавления в очередь', 'error');
            });
    }

    function removeFromQueue(stageId) {
        console.log('Удаление из очереди этапа:', stageId);

        fetch(`/Gantt/RemoveStageFromQueue?id=${stageId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Этап убран из очереди', 'success');
                    updateGantt();
                    $('#stageActionModal').modal('hide');
                    $('#queueModal').modal('hide');
                } else {
                    showToast('Ошибка: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error removing from queue:', error);
                showToast('Ошибка удаления из очереди', 'error');
            });
    }

    function releaseMachine(machineId, urgentStageId) {
        const reason = prompt('Укажите причину освобождения станка:');
        if (!reason) return;

        console.log('Освобождение станка:', machineId, 'для этапа:', urgentStageId);

        fetch(`/Gantt/ReleaseMachine`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                machineId: machineId,
                urgentStageId: urgentStageId,
                reason: reason
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('Станок освобожден', 'success');
                updateGantt();
                $('#stageActionModal').modal('hide');
            } else {
                showToast('Ошибка: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error releasing machine:', error);
            showToast('Ошибка освобождения станка', 'error');
        });
    }

    // Вспомогательные функции
    function getStatusBadgeClass(status) {
        const statusClasses = {
            'Pending': 'bg-secondary',
            'Ready': 'bg-info',
            'Waiting': 'bg-warning',
            'InProgress': 'bg-primary',
            'Paused': 'bg-warning',
            'Completed': 'bg-success',
            'Cancelled': 'bg-danger'
        };
        return statusClasses[status] || 'bg-secondary';
    }

    function showToast(message, type = 'info') {
        // Простая реализация уведомлений
        const alertClass = type === 'success' ? 'alert-success' :
                          type === 'error' ? 'alert-danger' : 'alert-info';

        const toast = $(`
            <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                 style="top: 20px; right: 20px; z-index: 9999;">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `);

        $('body').append(toast);
        setTimeout(() => toast.remove(), 5000);
    }

    // Инициализация при загрузке страницы
    document.addEventListener('DOMContentLoaded', function() {
        const today = new Date();
        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const oneWeekLater = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);

        document.getElementById('startDate').value = oneWeekAgo.toISOString().split('T')[0];
        document.getElementById('endDate').value = oneWeekLater.toISOString().split('T')[0];
    });
</script>